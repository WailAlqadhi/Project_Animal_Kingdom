Animal_Kingdom
Animal Kingdom Project for Software Design and Development Course from Untiar International University Master of Information Technology Supervised by Dr. Hadi Najvipour Prepared by Wael Mohamed Abdel Hamid Al-Qadi

ABSTRACT 
The Animal Kingdom program doesn't require a main method. Instead, a set of objects will be defined to function as a part of a larger system. The critters within the program can only move when the simulator prompts them to do so, indicating that the simulator controls the critters class. The critters are situated within a finite world that is enclosed by walls on all four sides. It is recommended to include a constructor for each class to keep track of essential variables, such as the number of moves. Classes that use the same strings/colors consistently should declare them as class constants. The program includes several supporting classes such as Critter, CritterMain, CritterModel, CritterFrame, CritterInfo (interface), CritterPanel, FlyTrap, and Food. Generally, these classes can be ignored. When compiling CritterMain, the other classes will also be compiled. To modify and recompile the program, only CritterMain and its five individual Critter classes need to be edited to add the animals' frame and behavior.

INTRODUCTION 
Java is a high-level programming language developed by Sun Microsystems (now Oracle) in the mid-1990s. It was designed to be platform-independent and can run on any platform or operating system that has a Java Virtual Machine (JVM) installed. Java is widely used for developing various types of applications such as web applications, desktop applications, mobile apps, and games. Java is an object-oriented programming language that is easy to learn and use. It has a large community of developers who contribute to its development and maintenance. Java is known for its security features and is used in many enterprise applications. Java is also used in scientific computing and data analysis. Java has a rich set of libraries and frameworks that make it easy to develop complex applications. Java is an open-source language with a large number of tools and resources available for developers. Java has a large number of job opportunities available for developers. Java is a versatile language that can be used for developing applications in many domains such as finance, healthcare, education, and more. IntelliJ IDEA is an Integrated Development Environment (IDE) that is widely used by Java developers worldwide. It is developed by JetBrains and provides a wide range of features such as code analysis, code completion, debugging, and version control integration. IntelliJ IDEA also supports many other programming languages such as Kotlin, Python, and JavaScript. It is available in both free and paid versions with the paid version providing more advanced features and capabilities.

PROJECT DESCRIPTION
The Animal Kingdom project is an innovative simulation game that aims to bring to life the fascinating world of animals through virtual interactions. This project utilizes a Java program to create an engaging and interactive experience for users who can engage with various animal species represented as objects. The primary objective of this project is to simulate the behavior of animals and enable users to interact with them in different ways. To achieve this, a superclass known as "Critter" is created, which specifies the fundamental behavior of each animal in the simulation. This superclass serves as the foundation for the development of five subclasses, each representing a distinct animal species. The five subclasses developed in this project are Bear, Tiger, White Tiger, Giant, and Ninja Cat. Each subclass is unique and exhibits specific behaviors and qualities that distinguish them from one another. For example, the Bear subclass may have different behaviors than the Ninja Cat subclass. The development of these subclasses was critical to ensure the accuracy and authenticity of the animal's behavior simulated in the game. This allows users to have a realistic and immersive experience while interacting with the animals in the virtual world. Overall, the Animal Kingdom project is a great example of how technology can be used to create innovative and interactive experiences that educate and entertain users. The project's developers have done an excellent job in creating a program that brings to life the fascinating world of animals and provides users with a unique and enjoyable experience.

PROJECT DESIGN 
The Animal Kingdom project demands a graphical user interface (GUI) that provides an interactive platform for users to observe and interact with the animals in the simulation using mouse clicks and keyboard events. Java Swing, a powerful GUI toolkit, is used to build this user interface. The GUI developed in the Animal Kingdom project displays the current state of the simulation, allowing users to monitor the animal's behavior and control various simulation parameters, such as simulation speed and other settings. Java Swing offers a wide range of components and layouts that enable developers to create a visually appealing and functional user interface, which is essential for creating an immersive and engaging experience for the users. By implementing Java Swing in this project, developers can gain valuable experience in building interactive user interfaces using Java programming. They can learn how to use different Swing components, layouts, and event listeners to create a responsive and dynamic user interface that can handle user input and update the simulation's state accordingly. Overall, the Animal Kingdom project is an exciting way to apply object-oriented programming principles and learn how to develop interactive user interfaces using Java Swing. Completing this project can provide valuable experience and skills that can be used in a wide range of programming projects, from creating simple desktop applications to building complex enterprise software solutions.

PROGRAM WORKFLOW AND LOGICS
The Animal Kingdom program's workflow and logic are crucial to ensuring that the animal simulation works as expected. Here are the key components of the program's workflow and logic: • Initialization: The program initializes the simulation by creating the Critter superclass and the five subclasses of animals. The program sets up the initial positions and attributes for each animal. • Main loop: The program enters the main simulation loop, where it updates each animal's state and checks for any interactions or events. The loop continues until the user decides to end the simulation. • Updating animal states: In each iteration of the loop, the program updates each animal's state based on their current position, energy level, and behavior. The program uses various methods defined in the Critter superclass and the subclasses to calculate each animal's next position and behavior. • Checking for interactions: The program checks for any interactions between animals, such as when a predator hunts its prey or when animals compete for food or territory. The program uses the appropriate methods in each subclass to simulate these interactions and update the animals' attributes accordingly. • Handling user input: The program allows the user to interact with the simulation by using mouse clicks or keyboard events. The program uses Java Swing components to capture user input and update the simulation state accordingly. • Updating the GUI: The program updates the graphical user interface (GUI) to display the current state of the simulation, including the positions and attributes of each animal. The program uses Java Swing components to display this information to the user. • Simulation speed control: The program allows the user to control the simulation speed, so they can speed up or slow down the simulation as desired. The program uses a delay or sleep method to regulate the simulation speed. • End of simulation: The program ends the simulation when the user decides to quit or when certain conditions are met, such as when all animals die or when a specific time limit is reached. In summary, the Animal Kingdom program's workflow and logic involve initializing the simulation, updating each animal's state, checking for interactions, handling user input, updating the GUI, controlling the simulation speed, and ending the simulation. By following this workflow and logic, the program can simulate animal behavior and provide an engaging and interactive experience for the user. DEVELOPMENT DETAILS The Animal Kingdom project's Critter program is the foundation for simulating animal behavior in the game. The Critter program is a superclass that defines the fundamental behavior of each animal in the simulation. The Critter program specifies the animal's position, movement, energy, and other essential attributes that define its behavior in the simulation. To create a realistic simulation, the Critter program utilizes various object-oriented programming principles, including inheritance, polymorphism, and encapsulation. In addition to the Critter program, the Animal Kingdom project has five subclasses that represent different animal species, including Bear, Tiger, White Tiger, Giant, and Ninja Cat. Each subclass is designed to exhibit unique behaviors and characteristics that are typical of the animal it represents. For instance, the Bear subclass can roam around the simulation, hunt for food, and hibernate during the winter season. The Tiger subclass can hunt other animals and defend its territory. The White Tiger subclass can move faster than other animals and attack with greater force. The Giant subclass can crush other animals, and the Ninja Cat subclass can move quickly and hide from predators. Developers of the Animal Kingdom project utilized object-oriented programming principles to ensure that each subclass inherited the critical attributes of the Critter program. By using inheritance, they could create new subclasses quickly and easily, which increased the simulation's diversity and made it more interesting for the users. Overall, the Critter program is the backbone of the Animal Kingdom project, and the developers' careful implementation of object-oriented programming principles has enabled the creation of a sophisticated and engaging animal simulation game. The program's successful implementation has created an immersive and interactive experience that has proved to be a fun and engaging way to apply object-oriented programming principles in a real-world simulation. RESULTS The results of the Animal Kingdom program would vary depending on the specific parameters and settings used in the simulation. However, some potential results and observations could include: • Animal behavior: The program simulates animal behavior based on the defined attributes and interactions. For example, predators such as the bear or tiger would hunt and consume prey such as the ninja cat or giant. Animals with higher energy levels would be more aggressive and territorial, while those with lower energy levels would be more passive and cautious. • Population dynamics: The program simulates population dynamics based on the animals' reproductive rates and mortality rates. If the birth rate exceeds the death rate, the population would grow, while if the death rate exceeds the birth rate, the population would decline. Certain interactions such as predation or competition for resources could also affect the population dynamics. • User interaction: The program allows users to interact with the simulation through mouse clicks and keyboard events. Users can control the simulation speed, pause or resume the simulation, and observe the animals' behavior and interactions. • Visual display: The program uses Java Swing components to display the simulation's current state visually. Users can observe the animals' positions, attributes, and interactions in real-time. Overall, the Animal Kingdom program's results would demonstrate how object-oriented programming principles and Java Swing components can be used to simulate animal behavior and create an engaging and interactive user experience. The program could also be modified or extended to include additional animals, interactions, or features to further explore animal behavior and population dynamics.

DISCUSSION 
The Animal Kingdom program is an excellent example of how object-oriented programming principles can be used to simulate complex systems such as animal behavior and population dynamics. The program's use of inheritance, polymorphism, and encapsulation to model animal attributes and interactions demonstrates the power and flexibility of object-oriented design. The program's implementation of a graphical user interface (GUI) using Java Swing components provides an engaging and interactive user experience. Users can observe the animals' behavior and interactions in real-time and control the simulation's speed and parameters. The use of a GUI also allows for easy visualization and interpretation of the simulation's results. One potential limitation of the Animal Kingdom program is its simplicity. The program only includes a limited number of animal species and interactions, and the simulation's parameters are relatively straightforward. While this simplicity may be suitable for educational or demonstration purposes, it may not accurately reflect real-world animal behavior and population dynamics. Another limitation is the program's computational resources. The program's performance and accuracy may be affected by the available computing power and memory, particularly when simulating large populations or complex interactions. Overall, the Animal Kingdom program serves as an excellent example of how object-oriented programming principles and Java Swing components can be used to simulate and visualize complex systems. By extending or modifying the program's code, developers can further explore animal behavior and population dynamics and create more sophisticated simulations.

CONCLUSION 
In conclusion, the Animal Kingdom program is a valuable example of how object-oriented programming principles can be applied to simulate animal behavior and population dynamics. The program's use of inheritance, polymorphism, and encapsulation to model animal attributes and interactions demonstrates the flexibility and power of object-oriented design. The program's implementation of a graphical user interface using Java Swing components provides an interactive and engaging user experience. Users can observe the animals' behavior and interactions in real-time and control the simulation's speed and parameters. The program's use of a GUI also allows for easy visualization and interpretation of the simulation's results. While the program's simplicity and computational resource requirements may be limitations, it provides an excellent foundation for further exploration and development. By extending or modifying the program's code, developers can create more sophisticated simulations and explore a broader range of animal behavior and population dynamics. Overall, the Animal Kingdom program highlights the potential of object-oriented programming principles and Java Swing components to simulate complex systems and create engaging user experiences. Its educational and practical applications demonstrate the importance of these tools in modern software development.
